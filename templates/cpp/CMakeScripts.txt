cmake_minimum_required(VERSION 2.8)

# custom directories
set(BINARY_DIR Project/RelWithDebInfo)
set(TEMPLATES_DIR templates/cpp)
set(CHECKERS_DIR templates)

# default checker is compiled in case it wasn't already
if(NOT EXISTS ${BINARY_DIR}/default_checker)
    file(MAKE_DIRECTORY ${BINARY_DIR})
    execute_process(COMMAND g++ @default checker compiler options@
            -o ${BINARY_DIR}/default_checker
            ${CHECKERS_DIR}/default_checker.cpp)
endif()

# problems

set(PROBLEM_DIR @problem_dir@)
set(problem_id @problem_id@)
set(time_limit @time_limit@)
set(memory_limit @memory_limit@)
set(input_file_name @input_file_name@)
set(output_file_name @output_file_name@)

if(@test_type_changed@)
    configure_file(${TEMPLATES_DIR}/source_@test_type@.cpp ${PROBLEM_DIR}/source.cpp)
endif()

if(@time_limit_changed@ OR @memory_limit_changed@)
    configure_file(${TEMPLATES_DIR}/problem_limits.cpp ${PROBLEM_DIR}/problem_limits.cpp)
endif()

if(@input_file_name_changed@ OR @output_file_name_changed@)
    configure_file(${TEMPLATES_DIR}/main.cpp ${PROBLEM_DIR}/main.cpp)
endif()

if(@custom_checker@)
    set(CHECKER_FILE ${PROBLEM_DIR}/checker.cpp)
    if(NOT EXISTS ${CHECKER_FILE})
        configure_file(${CHECKERS_DIR}/checker.cpp ${CHECKER_FILE})
    endif()
else()
    if(@custom_checker_changed@ OR @checker_compiler_options_changed@)
        if("@checker_compiler_options@" STREQUAL "@default checker compiler options@")
            # if the checker has default compiler options, create a symlink
            execute_process(COMMAND ln -sf default_checker ${BINARY_DIR}/@problem_id@Checker)
        else()
            # otherwise, compile the checker
            execute_process(COMMAND g++ @checker_compiler_options@
                    -o ${BINARY_DIR}/@problem_id@Checker
                    ${CHECKERS_DIR}/default_checker.cpp)
        endif()
    endif()
endif()
